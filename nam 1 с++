#include <iostream>
#include <vector>
#include <cmath>

// Решение трехдиагональной системы методом прогонки (метод Томаса)
std::vector<double> solve_tridiagonal(std::vector<double> a, std::vector<double> b, std::vector<double> c, std::vector<double> d) {
    int n = d.size();
    std::vector<double> c_prime(n);
    std::vector<double> d_prime(n);
    std::vector<double> x(n);

    // Прямой ход метода прогонки
    c_prime[0] = c[0] / b[0];
    d_prime[0] = d[0] / b[0];
    for (int i = 1; i < n; ++i) {
        double m = 1.0 / (b[i] - a[i] * c_prime[i - 1]);
        c_prime[i] = c[i] * m;
        d_prime[i] = (d[i] - a[i] * d_prime[i - 1]) * m;
    }

    // Обратный ход метода прогонки
    x[n - 1] = d_prime[n - 1];
    for (int i = n - 2; i >= 0; --i) {
        x[i] = d_prime[i] - c_prime[i] * x[i + 1];
    }

    return x;
}

// Построение кубического сплайна с нулевой кривизной на концах
std::vector<double> cubic_spline_interpolation(std::vector<double>& x, std::vector<double>& y, double x_interp) {
    int n = x.size();

    // Вычисление h_i и коэффициентов a_i
    std::vector<double> h(n - 1);
    std::vector<double> a(n);
    for (int i = 0; i < n - 1; ++i) {
        h[i] = x[i + 1] - x[i];
        a[i] = y[i];
    }
    a[n - 1] = y[n - 1];

    // Построение трехдиагональной системы для нахождения вторых производных сплайна
    std::vector<double> alpha(n - 1);
    std::vector<double> beta(n - 1);
    std::vector<double> c(n);
    std::vector<double> d(n);

    for (int i = 1; i < n - 1; ++i) {
        alpha[i] = h[i - 1] / (h[i - 1] + h[i]);
        beta[i] = 3.0 * ((1.0 - alpha[i]) / h[i - 1] * (y[i] - y[i - 1]) + alpha[i] / h[i] * (y[i + 1] - y[i]));
    }

    // Заполнение коэффициентов трехдиагональной системы
    std::vector<double> a_prime(n - 2);
    std::vector<double> b_prime(n - 2);
    std::vector<double> c_prime(n - 2);
    std::vector<double> d_prime(n - 2);

    for (int i = 1; i < n - 1; ++i) {
        a_prime[i - 1] = alpha[i];
        b_prime[i - 1] = 2.0;
        c_prime[i - 1] = 1.0 - alpha[i];
        d_prime[i - 1] = beta[i];
    }

    // Решение системы уравнений для нахождения вторых производных сплайна
    std::vector<double> M = solve_tridiagonal(a_prime, b_prime, c_prime, d_prime);

    // Вставка нулевых кривизн на концах
    M.insert(M.begin(), 0.0);
    M.push_back(0.0);

    // Вычисление коэффициентов сплайна b_i и d_i
    std::vector<double> b(n - 1);
    std::vector<double> c_coeff(n - 1);
    std::vector<double> d_coeff(n - 1);

    for (int i = 0; i < n - 1; ++i) {
        b[i] = (y[i + 1] - y[i]) / h[i] - h[i] * (2.0 * M[i] + M[i + 1]) / 3.0;
        c_coeff[i] = M[i];
        d_coeff[i] = (M[i + 1] - M[i]) / (3.0 * h[i]);
    }

    // Интерполяция в точке x_interp
    int k = 0;
    while (x_interp > x[k + 1] && k < n - 2) {
        k++;
    }
    double x_k = x[k];
    double interpolated_value = y[k] + b[k] * (x_interp - x_k) + c_coeff[k] * pow((x_interp - x_k), 2) + d_coeff[k] * pow((x_interp - x_k), 3);

    return {interpolated_value};
}

int main() {
    // Даны узлы интерполяции и значения функции
    std::vector<double> x = {0.0, 1.0, 2.0, 3.0, 4.0};
    std::vector<double> y = {0.0, 0.5, 0.86603, 1.0, 0.86603};

    // Вычисление значения в точке x_interp = 1.5
    double x_interp = 1.5;
    std::vector<double> interpolated_values = cubic_spline_interpolation(x, y, x_interp);

    // Вывод результатов
    std::cout << "Interpolated value at x = " << x_interp << ": " << interpolated_values[0] << std::endl;

    return 0;
}
